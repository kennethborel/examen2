// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using examen.Data;

#nullable disable

namespace examen.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241125180623_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("examen.Models.Asignacion", b =>
                {
                    b.Property<int>("AsignacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AsignacionID"));

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReparacionID")
                        .HasColumnType("int");

                    b.Property<int>("TecnicoID")
                        .HasColumnType("int");

                    b.HasKey("AsignacionID");

                    b.HasIndex("ReparacionID");

                    b.HasIndex("TecnicoID");

                    b.ToTable("Asignaciones");
                });

            modelBuilder.Entity("examen.Models.DetalleReparacion", b =>
                {
                    b.Property<int>("DetalleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReparacionID")
                        .HasColumnType("int");

                    b.HasKey("DetalleID");

                    b.HasIndex("ReparacionID");

                    b.ToTable("DetallesReparacion");
                });

            modelBuilder.Entity("examen.Models.Equipo", b =>
                {
                    b.Property<int>("EquipoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipoID"));

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEquipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("EquipoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("examen.Models.Reparacion", b =>
                {
                    b.Property<int>("ReparacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReparacionID"));

                    b.Property<int>("EquipoID")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.HasKey("ReparacionID");

                    b.HasIndex("EquipoID");

                    b.ToTable("Reparaciones");
                });

            modelBuilder.Entity("examen.Models.Tecnico", b =>
                {
                    b.Property<int>("TecnicoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TecnicoID"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TecnicoID");

                    b.ToTable("Tecnicos");
                });

            modelBuilder.Entity("examen.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("examen.Models.Asignacion", b =>
                {
                    b.HasOne("examen.Models.Reparacion", "Reparacion")
                        .WithMany("Asignaciones")
                        .HasForeignKey("ReparacionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("examen.Models.Tecnico", "Tecnico")
                        .WithMany("Asignaciones")
                        .HasForeignKey("TecnicoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reparacion");

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("examen.Models.DetalleReparacion", b =>
                {
                    b.HasOne("examen.Models.Reparacion", "Reparacion")
                        .WithMany("DetallesReparacion")
                        .HasForeignKey("ReparacionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reparacion");
                });

            modelBuilder.Entity("examen.Models.Equipo", b =>
                {
                    b.HasOne("examen.Models.Usuario", "Usuario")
                        .WithMany("Equipos")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("examen.Models.Reparacion", b =>
                {
                    b.HasOne("examen.Models.Equipo", "Equipo")
                        .WithMany()
                        .HasForeignKey("EquipoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipo");
                });

            modelBuilder.Entity("examen.Models.Reparacion", b =>
                {
                    b.Navigation("Asignaciones");

                    b.Navigation("DetallesReparacion");
                });

            modelBuilder.Entity("examen.Models.Tecnico", b =>
                {
                    b.Navigation("Asignaciones");
                });

            modelBuilder.Entity("examen.Models.Usuario", b =>
                {
                    b.Navigation("Equipos");
                });
#pragma warning restore 612, 618
        }
    }
}
